#!/usr/bin/env bash


print_usage () {
    echo -e "Usage:\n$(basename "$0") <UUID>"
}


download_solution () {
    local solution_uuid="$1"

    local solution_dir="$(exercism download --uuid="$solution_uuid" 2> /dev/null)"
    
    local download_status="$?"

    if [ "$download_status" -ne 0 ]; then
        echo "Failed to download the exercise. Error code: "$download_status""

        exit 1
    fi

    echo "$solution_dir"
}


clean_solution_files () {
    printf "...Removing the '#[ignore]' lines from the test suite file.\n"

    local exercise_name="${PWD##*/}"

    local test_file="tests/$exercise_name.rs"

    sed -i -e "/ignore/d" "$test_file"

    if [ "$?" -ne 0 ]; then
        printf "Error: Failed to clean the solution test file. Aborting.\n"

        exit 1
    fi
}


run_rust_tools () {
    printf "...Running tests.\n"

    local test_results="$(cargo test --quiet > /dev/null 2>&1)"

    if [ "$?" -ne 0 ]; then
        printf "Error: Some tests have failed!\n%s\n" "$test_results"
    else
        printf "All the tests have passed!\n"
    fi

    cargo clean

    printf "...Running clippy.\n"

    local clippy_warnings="$(cargo clippy --quiet > /dev/null 2>&1)"

    if [ -n "$clippy_warnings" ]; then
        printf "Warning: Clippy has produced some warnings:\n%s\n" "$clippy_warnings"
    else
        printf "No clippy warnings.\n"
    fi

    printf "...Running rustfmt.\n"

    cargo fmt -- --quiet --check > /dev/null

    if [ "$?" -ne 0 ]; then
        printf "Warning: The solution is not formatted according to the rustfmt style guidelines.\n"
    fi
}


occurrences_number () {
    local string="$1"

    local sub="$2"

    local s=${string//"$sub"}

    echo "$((("${#string}" - "${#s}") / "${#sub}"))"
}


analyze_pythagorean_triplet () {
    local solution_path="src/lib.rs"

    local solution="$(<"$solution_path")"

    local mut_num="$(occurrences_number "$solution" "mut")"

    local for_num="$(occurrences_number "$solution" "for")"

    if [ "$mut_num" -gt 1 ]; then
        printf "Warning: big number of mutable variables (%s).\n" "$mut_num"
    fi

    if [ "$for_num" -gt 2 ]; then
        printf "Warning: big number of for loops (%s).\n" "$for_num"
    fi

    echo "$solution" | grep -E "(\b\w+\b) *\* *(\b\1\b)" > /dev/null

    if [ "$?" -eq 0 ]; then
        printf "Mentor notes warning: Found the occurrence of the 'a*a' construct.\n"
    fi

    echo "$solution" | grep -E "\breturn\b *\S+ *;" > /dev/null

    if [ "$?" -eq 0 ]; then
        printf "Mentor notes warning: Found the explicit return statement.\n"
    fi

    if [[ $solution =~ f[63][42] ]]; then
        printf "Mentor notes warning: Found the usage of the f32/f64 type.\n"
    fi
}


analyze_solution () {
    printf "...Analyzing the solution.\n"

    local exercise_name="${PWD##*/}"

    if [ "$exercise_name" == "pythagorean-triplet" ]; then
        analyze_pythagorean_triplet
    fi
}


if [ "$#" -ne 1 ]; then
    print_usage

    exit 1
fi

printf "...Downloading the solution.\n"

solution_dir="$(download_solution "$1")"

printf "Downloaded to %s\n" "$solution_dir"

(
    cd "$solution_dir"

    clean_solution_files

    run_rust_tools

    analyze_solution
)
